" Attempt to determine the type of a file based on its name and possibly its contents. Use this to allow intelligent
" auto-indenting for each filetype, and for plugins that are filetype specific.
filetype plugin on
filetype indent on

" Default to using UTF-8 encoding.
set encoding=utf-8

" Load color scheme.
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif

" Enable syntax highlighting
syntax on

" Set 'nocompatible' to ward off unexpected things that your distro might have made, as well as sanely reset options
" when re-sourcing .vimrc
set nocompatible

" Make transition from insert mode to normal mode very fast (2 seconds by default).
set timeoutlen=1000
set ttimeoutlen=10

" Set the command window height to 2 lines, to avoid many cases of having to 'press <Enter> to continue'
set cmdheight=2

" Show partial commands in the last line of the screen
set showcmd

" This allows you to switch from an unsaved buffer without saving it first. Also allows you to keep an undo history for
" multiple files. Vim will complain if you try to quit without saving, and swap files will keep you safe if your
" computer crashes.
set hidden

" Search settings.
set hlsearch      " highlight search
set incsearch     " reveal search incrementally as typed
set ignorecase    " case-insensitive match...
set smartcase     " ...except when uppercase letters are given

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" Instead of failing a command because of unsaved changes, raise a dialogue asking if you wish to save changed files.
set confirm

" Use visual bell instead of beeping when doing something wrong. No more annoying beeps!
set visualbell
set noerrorbells

" Showing special characters:
set list
set listchars=
" Mark the end of a non-wrapped long line with a '#'.
" Place a '#' in the last column when 'wrap' is off and the line continues beyond the right of the screen.
set listchars+=extends:#,
" Place a '#' in the first column when 'wrap' is off and there is text preceding the character visible in the first
" column.
set listchars+=precedes:#,
" Show non-breaking space characters as ¬.
set listchars+=nbsp:¬,
" Show tabs as ▸ followed by spaces.
set listchars+=tab:▸\ ,
" Show trailing spaces as ◊.
set listchars+=trail:◊,

" When scrolling to the top or bottom of the screen, keep 2 lines between the cursor and the edge of the screen.
set scrolloff=2

" '*.vf' files are interpreted as Verilog.
au BufRead,BufNewFile *.vf set filetype=verilog

" Files starting with 'Makefrag' are interpreted as Makefiles.
au BufRead,BufNewFile Makefrag* set filetype=make


"
" Spellcheck settings
"

" Configure and enable spell checking (w.o. capitalization check)
set spelllang=en_us
set spellfile=~/.vim/en.utf-8.add
set spellcapcheck=''
set spell

" Set custom highlighting for various spelling mistakes.
highlight clear SpellBad
highlight SpellBad cterm=underline
highlight clear SpellCap
highlight SpellCap cterm=underline
highlight clear SpellLocal
highlight SpellLocal cterm=underline
highlight clear SpellRare
highlight SpellRare cterm=underline


"
" Completion settings
"

" completion
set completeopt=longest,menuone

" Prevent vim from looking through all included files for autocomplete candidates. This can take a very long time when
" working with large external libraries.
set complete-=i

" Set command-line completion options.
set wildignore+=.svn,CVS,.git,*.pyc,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif,*.pdf,*.bak,
            \*.beam,*/tmp/*,*.zip,log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmode=longest,list,full


"
" Numbering settings
"

" Display line numbers on the left
set number

" Enable relative line numbers.
set relativenumber

" Auto-toggling of relative numbers. This will disable relative numbers for panes that do not have focus, and will also
" disable relative numbers in insert mode.
augroup numbertoggle
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
    autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

"
" Indentation settings
"

" When opening a new line and no filetype-specific indenting is enabled, keep the same indent as the line you're
" currently on. Useful for READMEs, etc.
set autoindent

" Default indentation settings. Display tabs as four characters wide, insert tabs as 4 spaces.
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

" Assembly files: Use actual <Tab> characters, and make them 8 characters wide.
autocmd Filetype asm setlocal ts=8 sts=8 sw=8 noexpandtab


"
" Text width settings
"

" By default, don't wrap text.
set nowrap

" Default textwidth.
set textwidth=99

" " Wrap text after a certain number of characters for certain filetypes.
" au FileType c,cpp,make,python,sh,systemverilog,tcl,verilog,vim,zsh setlocal textwidth=119

" Add a ruler to visually indicate the file's textwidth setting.
highlight ColorColumn ctermbg=18
set colorcolumn=+1


" Set the default location of window splits
set splitbelow
set splitright

" Prevent the quickfix/location buffer from showing up in typical buffer navigation commands.
augroup qf
    autocmd!
    autocmd FileType qf set nobuflisted
augroup END

" Enable code folding
set foldmethod=indent
set foldlevel=99


"
" Map settings
"

let mapleader=','       " map by , instead of /
let maplocalleader='\'  " map local by \

" clear search
nmap <silent> <leader>/ :nohlsearch<CR>

" spelling
nnoremap <silent> <leader>s :set spell!<CR>

" Delete trailing whitespace.
nnoremap <silent> <leader>w :call TrimWhitespace()<CR>

" Split window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Buffer navigation
map  ga <C-^>
nmap gn :bn<CR>
nmap gp :bp<CR>
nmap gk :bp<bar>bd #<CR>

" Start interactive EasyAlign in visual mode (e.g. vipgs)
xmap gs <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gsip)
nmap gs <Plug>(EasyAlign)

" Enable code folding with the spacebar
nnoremap <space> za

" fzf mappings.
nnoremap <leader>p :FzfHistory<CR>
nnoremap <leader>b :FzfBuffers<CR>
nnoremap <leader>t :FzfFiles<CR>
nnoremap <leader>f :FzfRg<CR>

" ALE mappings.
nnoremap <leader>d :ALEGoToDefinition<CR>
nnoremap <leader>r :ALEFindReferences<CR>
nnoremap <leader>h :ALEHover<CR>
nnoremap <leader>i :ALEFix<CR>
nmap <silent> gj <Plug>(ale_next_wrap)


"
" Custom functions
"

" Function for removing trailing whitespace without affecting the cursor location/search history:
" http://vi.stackexchange.com/a/456
fun! TrimWhitespace()
  let l:save = winsaveview()
  %s/\s\+$//e
  call winrestview(l:save)
endfun


"
" Status line settings
"

" Don't show what mode we're in on the last line. I'm already using airline.
set noshowmode

" Make sure all windows that aren't in focus always have a status line.
set laststatus=2

" Customize airline appearance.
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

let g:airline_theme = 'base16_classic'

let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste  = 'ρ'

" Enable enhanced tabline.
let g:airline#extensions#tabline#enabled = 1

" Enable tmuxline integration.
let g:airline#extensions#tmuxline#enabled = 1

" Auto-save tmuxline settings to this file.
let g:airline#extensions#tmuxline#snapshot_file = "~/.tmux-statusline-colors.conf"

" Show ALE status in the status bar.
let g:airline#extensions#ale#enabled = 1

"
" Tmuxline settings
"

" Don't let tmuxline use powerline fonts. Don't have those installed.
let g:tmuxline_powerline_separators = 0

" Customize the status bar.
let s:tmux_widget_are_keys_off = '#([ "$(tmux show-option -qv key-table)" = "off" ] && echo "[OFF] ")'
let g:tmuxline_preset = {
            \'a'    : '#(whoami)',
            \'b'    : '#h',
            \'c'    : '#S',
            \'win'  : '#I #W #F',
            \'cwin' : '#I #W #F',
            \'y'    : s:tmux_widget_are_keys_off . '%a %b %d %Y',
            \'z'    : '%H:%M %Z'}


"
" EasyAlign settings
"

" Experimentation with some custom EasyAlign commands.
if !exists('g:easy_align_delimiters')
  let g:easy_align_delimiters = {}
endif

" TODO: Explain how this works.
let g:easy_align_delimiters['('] = {
            \ 'pattern': '#\?(',
            \ 'stick_to_left': 0, 'stick_to_right': 1,
            \ 'delimiter_align': 'l',
            \ 'left_margin': 1, 'right_margin': 0
            \ }


"
" fzf settings
"

let g:fzf_command_prefix = 'Fzf'

" Add fzf to the runtimepath. Not sure why this is necessary, but I can't get fzf in vim to work without it.
if isdirectory($HOMEBREW_PREFIX . "/opt/fzf")
    execute 'set rtp+=' . expand($HOMEBREW_PREFIX . "/opt/fzf")
elseif isdirectory($HOME . "/.fzf")
    execute 'set rtp+=' . expand($HOME . "/.fzf")
endif

" fzf command to search other files for code using ripgrep.
command! -bang -nargs=* FzfRg
            \ call fzf#vim#grep(
            \ 'rg --column --line-number --no-heading --ignore-case --follow --color always '.shellescape(<q-args>), 1,
            \ <bang>1 ? fzf#vim#with_preview('up:60%')
            \         : fzf#vim#with_preview('right:50%:hidden', '?'),
            \ <bang>0)



"
" vimtex settings
"

let g:tex_flavor = 'latex'
let g:vimtex_view_method = 'skim'
let g:vimtex_compiler_latexmk = {
            \ 'backend' : 'jobs',
            \ 'background' : 1,
            \ 'build_dir' : 'livepreview',
            \ 'callback' : 0,
            \ 'continuous' : 1,
            \ 'executable' : 'latexmk',
            \ 'options' : [
            \   '-lualatex',
            \   '-silent',
            \   '-synctex=1',
            \   '-interaction=nonstopmode',
            \ ],
            \}


"
" ALE (Asynchronous Lint Engine) settings
"

" De-prioritize all lint commands.
let g:ale_command_wrapper = 'nice -n4'

" Open ALE preview window when the cursor moves onto lines with problems.
let g:ale_cursor_detail = 1

" Enable auto-complete with ALE.
let g:ale_completion_enabled = 1

let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'c': ['clang-format'],
\   'cpp': ['clang-format'],
\   'json': ['jq'],
\   'python': ['black'],
\   'rust': ['rustfmt'],
\   'scala': ['scalafmt'],
\   'sh': ['shfmt'],
\}

let g:ale_linters = {
\   'c': ['ccls'],
\   'cpp': ['ccls'],
\   'rust': ['rls'],
\}

" Enable clippy lints.
let g:ale_rust_rls_config = {
\   'rust': {
\     'clippy_preference': 'on'
\   }
\}

" Options for JSON fixer, jq:
" * Indents should be 4 spaces.
let g:ale_json_jq_options = '--indent 4'

" Options for Shell script fixer, shfmt:
" * Indents should be 4 spaces.
let g:ale_sh_shfmt_options = '-i 4'

let g:ale_c_ccls_init_options = {
\   'compilationDatabaseCommand': 'compiledb make'
\ }

let g:ale_cpp_ccls_init_options = {
\   'compilationDatabaseCommand': 'compiledb make'
\ }

"
" Generate documentation tags automatically
"

" Put these lines at the very end of your vimrc file.

" Load all plugins now.
" Plugins need to be added to runtimepath before helptags can be generated.
packloadall
" Load all of the helptags now, after plugins have been loaded.
" All messages and errors will be ignored.
silent! helptags ALL
