#!/bin/bash -e

# If the user accidentally ran this as root, tell them that this might be
# wrong.
if [[ "$(id -u)" == "0" ]] ; then
    echo "This script was not designed to run as root. All files will be"
    echo "installed using the following HOME directory: $HOME"

    # Give the user the option to exit and re-run the script as a non-root
    # user.
    read -p "Do you want to continue running this script as root? [y/n] " yn
    if [[ "$yn" != "y" ]] ; then
        exit 0
    fi
fi


# Keep track of this script's directory.
cd $(dirname $0)
export DOTFILES_DIR="$(pwd)"

# Check OS.
OS=$(uname -s)
MAC=false
CENTOS=false
UBUNTU=false
if [[ "$OS" == "Darwin" ]] ; then
    MAC=true
elif [[ "$OS" == "Linux" ]] ; then
    if cat /etc/system-release | grep -iq centos; then
        CENTOS=true
    elif cat /etc/system-release | grep -iq ubuntu; then
        UBUNTU=true
    else
        echo "In Linux, unknown distro: $OS. Aborting."
        exit 1
    fi
else
    echo "Unknown operating system: $OS. Aborting."
    exit 1
fi


# Make sure the basic set of utilities are installed.
if $MAC; then
    # If homebrew isn't installed, install it.
    if ! command -v brew >/dev/null 2>&1; then
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi

    # Update to the most recent version of Homebrew.
    brew update

    # Update all installed Homebrew packages.
    brew upgrade

    # Remove old versions of Homebrew files.
    brew cleanup

    # Make sure the default programs are installed.
    DEFAULT_PROGRAMS="vim zsh git htop rg fzf tmux fd"
    for program_name in $DEFAULT_PROGRAMS
    do
        if ! command -v $program_name >/dev/null 2>&1; then
            brew install $program_name
        fi
    done

    # NOTE: To get htop to be able to see all processes not owned by the
    # current user (basically, to get around having to run 'sudo htop'), you
    # have to do this:
    #   cd /usr/local/Cellar/htop/<VERSION_NUMBER>/bin/
    #   chmod 6555 htop
    #   sudo chown root htop

elif $CENTOS; then
    echo "Nothing to install for CentOS."
elif $UBUNTU; then
    sudo apt-get install vim-gnome zsh git
fi


# Customize git installation.
$DOTFILES_DIR/git/install_git


# Customize Python3 installation.
$DOTFILES_DIR/python/install_python $MAC $CENTOS $UBUNTU


# Install local bin scripts.
$DOTFILES_DIR/bin/install_bin


# Customize tmux installation.
$DOTFILES_DIR/tmux/install_tmux


# Install Base16 Shell.
dest_dir="$HOME/.config/base16-shell"
if [[ -d "$dest_dir" ]] ; then
    cd $dest_dir
    git pull
    cd $DOTFILES_DIR
else
    git clone https://github.com/chriskempson/base16-shell.git $dest_dir
fi


# Customize vim installation.
$DOTFILES_DIR/vim/install_vim


# Customize zsh installation.
ZSH_PATH=$(which zsh)

if [[ ! -x "$ZSH_PATH" ]] ; then
    echo "Could not detect a zsh executable (ZSH_PATH='$ZSH_PATH')"
    exit 1
fi

# Clone zprezto repo and install it.
ZPREZTO_PATH="$HOME/.zprezto"

if [[ -d "$ZPREZTO_PATH" ]] ; then
    cd "$ZPREZTO_PATH"

    # Check if we have an upstream remote configured. If we don't then
    # configure one.
    if ! git remote -v | grep -q '^upstream' > /dev/null 2>&1; then
        git remote add upstream https://github.com/sorin-ionescu/prezto.git
    fi

    cd $DOTFILES_DIR
else
    # Clone ZSH configuration files.
    git clone --recursive https://github.com/tymcauley/prezto.git \
        "$ZPREZTO_PATH"

    # Install ZSH configuration.
    for rcfile in $ZPREZTO_PATH/runcoms/z*; do
        rcfile_name=$(basename $rcfile)
        ln -s -v "$rcfile" "$HOME/.$rcfile_name"
    done
fi

# If necessary, change the user's shell to zsh.
if [[ "$SHELL" != "$ZSH_PATH" ]] ; then
    echo "Changing shell from '$SHELL' to '$ZSH_PATH'"
    # Only the root user is allowed to use a shell that is not in
    # /etc/shells.
    if [[ "$(id -u)" != "0" ]] ; then
        SHELLS_FILE=/etc/shells
        # Make sure $ZSH_PATH is in $SHELLS_FILE.
        if ! grep -q "$ZSH_PATH" $SHELLS_FILE ; then
            echo "Since you aren't the super-user, '$ZSH_PATH' must be in '$SHELLS_FILE'"
            echo "Execute this command (as root) to fix that:"
            echo "  echo $ZSH_PATH >> $SHELLS_FILE"
            exit 1
        fi
    fi
    chsh -s $ZSH_PATH
fi
