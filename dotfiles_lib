# Library functions for dotfiles repo.

if [[ -z "$DOTFILES_DIR" ]] ; then
    echo "DOTFILES_DIR is undefined."
    exit 2
fi

# Custom print methods.
pretty_time () { date "+%Y-%d-%m|%H:%M:%S"; }
iecho () { echo "I[$(pretty_time)] $@"; }
wecho () { echo "W[$(pretty_time)] $@"; }
eecho () { echo "E[$(pretty_time)] $@"; }

# If a local git repo exists, update it. If it doesn't exist, clone a new repo in the expected location.
#
# Inputs:
#   $1 : path to remote git repository to clone/pull.
#   $2 : path to local git repository
git_clone_or_update () {
    if [[ -d "$2" ]] ; then
        iecho "Updating $2 from $1"
        git -C "$2" pull
    else
        iecho "Cloning $1 into $2"
        git clone "$1" "$2"
    fi
}

# Install a file with a symbolic link.
#
# Check to see if the destination file exists. If it does, delete it and overwrite it with a link
# to the source file. If the destination file is a link, check to see if it's a link to the source
# file already. If not, overwrite it with a new link.
#
# Inputs:
#   $1 : path to destination for link.
#   $2 : path to source file to be installed.
install_file () {
    local DEST_F=$1
    local SOURCE_F=$2

    # Confirm the file-to-be-installed exists.
    if [[ ! -f "$SOURCE_F" ]] ; then
        echo "Source file '$SOURCE_F' doesn't exist"
        exit 1
    fi

    # If the destination file isn't a link, get rid of it so we can override it with a link.
    if [[ -f "$DEST_F" && ! -L "$DEST_F" ]] ; then
        prompt_user_yn "Remove destination file '$DEST_F' before linking to '$SOURCE_F'?"
        rm -f "$DEST_F"
    fi

    # If the destination file is a link, and it doesn't point to the source file, get rid of it so
    # we can link it to the source file.
    if [[ -L "$DEST_F" && "$(readlink -- "$DEST_F")" != "$SOURCE_F" ]] ; then
        prompt_user_yn "Change destination link '$DEST_F' to point to '$SOURCE_F' instead of '$(readlink -- "$DEST_F")'?"
        rm -f "$DEST_F"
    fi

    # If the destination file's parent directory doesn't exist, create it.
    if [[ ! -d "$(dirname "$DEST_F")" ]] ; then
        mkdir -p "$(dirname "$DEST_F")"
    fi

    # Create the link if we haven't already done so previously.
    if [[ ! -e "$DEST_F" ]] ; then
        ln -s -v "$SOURCE_F" "$DEST_F"
    fi
}

# Install all files within a directory (non-recursive)
#
# Runs 'install_file' on every file within a directory.
#
# Inputs:
#   $1 : path to destination directory.
#   $2 : path to source directory.
install_dir () {
    for f in $2/*; do
        base_f="$(basename "$f")"
        install_file "$1/$base_f" "$f"
    done
}

# Prompt a user with a yes-no prompt. If they don't answer "yes", then exit the script.
prompt_user_yn () {
    read -p "$1 [y/n] " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]] ; then
        echo "Exiting..."
        exit 1
    fi
}
